@{
    Layout = "_layout.cshtml";
}

@section Title{ @Model.Name > }

<h1>@Model.Name</h1>

@if (Model.PhotoFile != null)
{
    <p><img src="@Url.Content("~/assets/img/photos/" + @Model.PhotoFile)"/></p>
}

<p>@Html.Raw(@Model.Bio)</p>

@if (
    @Model.Links.Count > 0
    &&
    @*
    this condition ensures that contents is really fetched
    during testing there was a situation where MVP had no links, but had 1 object in the collection (with null title and text)
    *@
    @Model.Links.First().Value != null
    )
{
    <fieldset>
        <legend>Linki</legend>
        @foreach(var link in @Model.Links)
        {
            <p>
            @if (@link.Name != null)
            {
                @link.Name@::
            }
            @Html.Raw(link.Value)
            </p>
        }
    </fieldset>
}

@if (
    @Model.Contents.Count > 0
    &&
    @*
    this condition ensures that contents is really fetched
    during testing there was a situation where MVP had no contents, but had 1 object in the collection (with null title and text)
    *@
 @Model.Contents.First().Title != null
    )
{
<ul class="nav nav-tabs">
    @foreach (var content in @Model.Contents)
    {
        <li @if (content == Model.Contents.First())
            {
                <text>class="active"</text>
            }>
            <a href="#content-@content.Title.Replace(' ', '-')" data-toggle="tab">@content.Title</a>
        </li>
    }
</ul>

    <div class="tab-content">
        @foreach (var content in @Model.Contents)
        {
            <div @if (content == Model.Contents.First())
                 {
                     <text>class="tab-pane fade in active"</text>
                 }
                 else
                 {
                     <text>class="tab-pane fade"</text>
                 } id="content-@content.Title.Replace(' ', '-')">
                @Html.Raw(content.Text)
            </div>
        }
    </div>
}
    