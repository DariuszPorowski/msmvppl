@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<dynamic>
@{
    Layout = "_layout.cshtml";
}

@section Title{ @Model.FirstName @Model.LastName > }

<h1>@Model.FirstName @Model.LastName</h1>

@if (Model.PhotoFile != null)
{
    <p><img src="@Url.Content("~/assets/img/photos/" + @Model.PhotoFile)"/></p>
}

<p>@Html.Raw(@Model.Bio)</p>

@*
this condition ensures that contents is really fetched
during testing there was a situation where MVP had no Nominations, but had 1 object in the collection (with null start date)
*@
@if (@Model.Nominations.Count > 0 && @Model.Nominations.First().StartDate != null)
{
    <fieldset>
        <legend>Nominacje</legend>
        <ul class="nav nav-list">
            @foreach (var nomination in @Model.Nominations)
            {
            <li>
                @nomination.StartDate.ToString("yyyy-MM")
                -
                @(nomination.EndDate == null ? "?" : nomination.EndDate.ToString("yyyy-MM"))
                (@nomination.Category)
            </li>
            }
        </ul>
    </fieldset>
}

@*
this condition ensures that contents is really fetched
during testing there was a situation where MVP had no links, but had 1 object in the collection (with null title and text)
*@
@if (@Model.Links.Count > 0 && @Model.Links.First().Value != null)
{
    <fieldset>
        <legend>Linki</legend>
        @foreach (var link in @Model.Links)
        {
            <p>
            @if (@link.Name != null)
            {
                @link.Name@::
            }
            @Html.Raw(link.Value)
            </p>
        }
    </fieldset>
}

@*
this condition ensures that contents is really fetched
during testing there was a situation where MVP had no contents, but had 1 object in the collection (with null title and text)
*@

@if (@Model.Contents.Count > 0 && @Model.Contents.First().Title != null)
{
    <ul class="nav nav-tabs">
        @foreach (var content in @Model.Contents)
        {
            <li @if (content == Model.Contents.First())
                {
                    <text>class="active"</text>
                }>
                <a href="#content-@Model.StringSlug(@content.Title)" data-toggle="tab">@content.Title</a>
            </li>
        }
    </ul>

    <div class="tab-content">
        @foreach (var content in @Model.Contents)
        {
            <div @if (content == Model.Contents.First())
                 {
                     <text>class="tab-pane fade in active"</text>
                 }
                 else
                 {
                     <text>class="tab-pane fade"</text>
                 } id="content-@Model.StringSlug(@content.Title)">
                @Html.Raw(content.Text)
            </div>
        }
    </div>
}

@section twitter
{
    <div id="twitter-profile"></div>
}

@section scripts
{
    <script type="text/javascript">

        $(function () {

            var elem = $('#twitter-profile'), widget;

            if (elem.length > 0) {
                
                $.getJSON('@Url.Content("~/twitter/" + Model.Slug)', function (data) {
                    if (data.Twitter) {
                        widget = new TWTR.Widget({
                            id: 'twitter-profile',
                            version: 2,
                            type: 'profile',
                            rpp: 10,
                            interval: 30000,
                            width: 200,
                            height: 300,
                            theme: {
                                shell: {
                                    background: '#8ec1da',
                                    color: '#ffffff'
                                },
                                tweets: {
                                    background: '#ffffff',
                                    color: '#444444',
                                    links: '#1985b5'
                                }
                            },
                            features: {
                                scrollbar: true,
                                loop: false,
                                live: true,
                                behavior: 'all'
                            }
                        });

                        widget.render();
                        widget.setUser(data.Twitter);
                        widget.start();
                    } else {
                        elem.parent().hide();
                    }
                });
            }
        });

            
    </script>
}